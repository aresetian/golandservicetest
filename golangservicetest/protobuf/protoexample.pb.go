// Code generated by protoc-gen-go.
// source: protoexample.proto
// DO NOT EDIT!

package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FOO int32

const (
	FOO_X FOO = 17
)

var FOO_name = map[int32]string{
	17: "X",
}
var FOO_value = map[string]int32{
	"X": 17,
}

func (x FOO) Enum() *FOO {
	p := new(FOO)
	*p = x
	return p
}
func (x FOO) String() string {
	return proto.EnumName(FOO_name, int32(x))
}
func (x *FOO) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FOO_value, data, "FOO")
	if err != nil {
		return err
	}
	*x = FOO(value)
	return nil
}
func (FOO) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Test struct {
	Label         *string             `protobuf:"bytes,1,req,name=label" json:"label,omitempty"`
	Type          *int32              `protobuf:"varint,2,opt,name=type,def=77" json:"type,omitempty"`
	Reps          []int64             `protobuf:"varint,3,rep,name=reps" json:"reps,omitempty"`
	Optionalgroup *Test_OptionalGroup `protobuf:"group,4,opt,name=OptionalGroup" json:"optionalgroup,omitempty"`
	// Types that are valid to be assigned to Union:
	//	*Test_Number
	//	*Test_Name
	Union            isTest_Union `protobuf_oneof:"union"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Test) Reset()                    { *m = Test{} }
func (m *Test) String() string            { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()               {}
func (*Test) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

const Default_Test_Type int32 = 77

type isTest_Union interface {
	isTest_Union()
}

type Test_Number struct {
	Number int32 `protobuf:"varint,6,opt,name=number,oneof"`
}
type Test_Name struct {
	Name string `protobuf:"bytes,7,opt,name=name,oneof"`
}

func (*Test_Number) isTest_Union() {}
func (*Test_Name) isTest_Union()   {}

func (m *Test) GetUnion() isTest_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (m *Test) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Test) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Test_Type
}

func (m *Test) GetReps() []int64 {
	if m != nil {
		return m.Reps
	}
	return nil
}

func (m *Test) GetOptionalgroup() *Test_OptionalGroup {
	if m != nil {
		return m.Optionalgroup
	}
	return nil
}

func (m *Test) GetNumber() int32 {
	if x, ok := m.GetUnion().(*Test_Number); ok {
		return x.Number
	}
	return 0
}

func (m *Test) GetName() string {
	if x, ok := m.GetUnion().(*Test_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Test) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Test_OneofMarshaler, _Test_OneofUnmarshaler, _Test_OneofSizer, []interface{}{
		(*Test_Number)(nil),
		(*Test_Name)(nil),
	}
}

func _Test_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Test)
	// union
	switch x := m.Union.(type) {
	case *Test_Number:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Number))
	case *Test_Name:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case nil:
	default:
		return fmt.Errorf("Test.Union has unexpected type %T", x)
	}
	return nil
}

func _Test_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Test)
	switch tag {
	case 6: // union.number
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Union = &Test_Number{int32(x)}
		return true, err
	case 7: // union.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Union = &Test_Name{x}
		return true, err
	default:
		return false, nil
	}
}

func _Test_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Test)
	// union
	switch x := m.Union.(type) {
	case *Test_Number:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Number))
	case *Test_Name:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Test_OptionalGroup struct {
	RequiredField    *string `protobuf:"bytes,5,req,name=RequiredField" json:"RequiredField,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Test_OptionalGroup) Reset()                    { *m = Test_OptionalGroup{} }
func (m *Test_OptionalGroup) String() string            { return proto.CompactTextString(m) }
func (*Test_OptionalGroup) ProtoMessage()               {}
func (*Test_OptionalGroup) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *Test_OptionalGroup) GetRequiredField() string {
	if m != nil && m.RequiredField != nil {
		return *m.RequiredField
	}
	return ""
}

func init() {
	proto.RegisterType((*Test)(nil), "example.Test")
	proto.RegisterType((*Test_OptionalGroup)(nil), "example.Test.OptionalGroup")
	proto.RegisterEnum("example.FOO", FOO_name, FOO_value)
}

var fileDescriptor1 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8e, 0xb1, 0x4b, 0x03, 0x31,
	0x14, 0x87, 0x7b, 0x97, 0xa4, 0x47, 0x1f, 0x8d, 0xd4, 0x07, 0x42, 0xd0, 0xe5, 0x70, 0x90, 0xc3,
	0xe1, 0x86, 0x2e, 0x05, 0x47, 0x87, 0xda, 0xed, 0x40, 0x1c, 0x5c, 0x53, 0xfa, 0x90, 0x83, 0x5c,
	0x12, 0xd3, 0x04, 0xf4, 0x7f, 0xf3, 0x8f, 0x33, 0x91, 0x73, 0xe8, 0xf8, 0xc1, 0xf7, 0xbe, 0xf7,
	0x03, 0xf4, 0xc1, 0x45, 0x47, 0x5f, 0x7a, 0xf2, 0x86, 0xfa, 0x3f, 0xc0, 0x66, 0xc6, 0xfb, 0x9f,
	0x0a, 0xf8, 0x1b, 0x9d, 0x23, 0x4a, 0x10, 0x46, 0x1f, 0xc9, 0xa8, 0xaa, 0xad, 0xbb, 0x15, 0x6e,
	0x80, 0xc7, 0x6f, 0x4f, 0xaa, 0x6e, 0xab, 0x4e, 0x3c, 0xd5, 0xbb, 0x1d, 0xae, 0x81, 0x07, 0xf2,
	0x67, 0xc5, 0x5a, 0xd6, 0x31, 0xdc, 0x82, 0x74, 0x3e, 0x8e, 0xce, 0x6a, 0xf3, 0x11, 0x5c, 0xf2,
	0x8a, 0x67, 0x11, 0xb6, 0x77, 0xfd, 0xff, 0x9f, 0x12, 0xed, 0x87, 0x59, 0x79, 0x29, 0x4a, 0x6e,
	0x2e, 0x6d, 0x9a, 0x8e, 0x14, 0xd4, 0xb2, 0x54, 0x0f, 0x0b, 0xbc, 0x02, 0x6e, 0xf5, 0x44, 0xaa,
	0xc9, 0xbc, 0x3a, 0x2c, 0x6e, 0x1f, 0x40, 0x5e, 0x9e, 0xdc, 0x80, 0x7c, 0xa5, 0xcf, 0x34, 0x06,
	0x3a, 0xed, 0x47, 0x32, 0x27, 0x25, 0xca, 0xba, 0xe7, 0x06, 0x44, 0xb2, 0x59, 0x7b, 0x5c, 0x03,
	0xdb, 0x0f, 0x03, 0x0a, 0xa8, 0xde, 0x37, 0xd7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x75, 0x7f,
	0x28, 0xb4, 0xea, 0x00, 0x00, 0x00,
}
